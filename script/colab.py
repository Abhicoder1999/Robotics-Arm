# -*- coding: utf-8 -*-
"""fingers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KEO_TC667j9VIWzLA2KAzQ7snn-PouKe
"""

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive 
from google.colab import auth 
from oauth2client.client import GoogleCredentials
from google.colab import drive
import glob

import cv2
import numpy as np
import keras
import keras
from keras.models import Sequential,Input,Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D, Activation
from keras.layers.normalization import BatchNormalization
from keras.preprocessing.image import ImageDataGenerator
from keras import regularizers
import numpy as np
from matplotlib import pyplot as plt

drive.mount('/content/drive', force_remount = True)

img_path = glob.glob("/content/drive/My Drive/modified/modified/*")
print(np.array(img_path).shape)
y_train = []
x_train = []
y_test = []
x_test = []
count = 0
for path in img_path:
  image = cv2.imread(path)
  x_train.append(image)
  y_train.append(int(path[-6]))
  count +=1
  print(count)
x_train = np.array(x_train)
y_train = np.array(y_train)
y_train = keras.utils.to_categorical(y_train, num_classes = 6)
print(x_train.shape,y_train.shape)

img_path = glob.glob("/content/drive/My Drive/test/test_modified/*")
print(np.array(img_path).shape)
count = 0
for path in img_path:
  image = cv2.imread(path)
  x_test.append(image)
  y_test.append(int(path[-6]))
  count +=1
  print(count)
x_test = np.array(x_test)
y_test = np.array(y_test)
y_test = keras.utils.to_categorical(y_test, num_classes = 6)
print(x_test.shape,y_test.shape)

x_train_gr = np.zeros([len(x_train),128,128])
x_test_gr = np.zeros([len(x_test),128,128])
for k in range(len(x_train)):
  temp = x_train[k]
  temp = cv2.cvtColor(temp, cv2.COLOR_BGR2GRAY)
  temp[temp == 14] = 0 #corresponding during image storing
  temp[temp == 38] = 1
  x_train_gr[k] = temp

for k in range(len(x_test)):
  temp = x_test[k]
  temp = cv2.cvtColor(temp, cv2.COLOR_BGR2GRAY)
  temp[temp == 14] = 0 #corresponding during image storing
  temp[temp == 38] = 1
  x_test_gr[k] = temp

plt.imshow(x_train_gr[2])
print(x_train_gr.shape)
x_train_gr = np.expand_dims(x_train_gr, axis=3)
print(np.array(x_train_gr).shape)

plt.imshow(x_test_gr[2])
print(x_test_gr.shape)
x_test_gr = np.expand_dims(x_test_gr, axis=3)
print(np.array(x_test_gr).shape)

weight_decay = 1e-4

num_classes = 6

model = Sequential()

model.add(Conv2D(64, (4,4), padding='same', kernel_regularizer=regularizers.l2(weight_decay), input_shape=(128,128,1)))
model.add(Activation('relu'))
model.add(BatchNormalization())
model.add(Conv2D(64, (4,4), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))
model.add(Activation('relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))
 
model.add(Conv2D(128, (4,4), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))
model.add(Activation('relu'))
model.add(BatchNormalization())
model.add(Conv2D(128, (4,4), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))
model.add(Activation('relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.3))
 
model.add(Conv2D(128, (4,4), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))
model.add(Activation('relu'))
model.add(BatchNormalization())
model.add(Conv2D(128, (4,4), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))
model.add(Activation('relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.4))
 
model.add(Flatten())
model.add(Dense(128, activation="sigmoid"))
model.add(Activation('relu'))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer=keras.optimizers.Adam(0.0003), metrics=['accuracy'])

model.summary()

model.fit(x = x_train_gr,y = y_train, batch_size=64, validation_data = (x_test_gr,y_test), epochs = 5)

model.save_weights('casual_training2.h5')

!pip install -U -q PyDrive

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

model.save('model2.h5')
model_file = drive.CreateFile({'colab_models':'model2.h5'})
model_file.SetContentFile('model2.h5')
model_file.Upload()

drive.CreateFile({'id': model_file.get('id')})

file_obj = drive.CreateFile({'id': '1ZCJ4_AnKkdBGBeZRkpkTRZUjlqO5HMRP'})
file_obj.GetContentFile('model1.h5')